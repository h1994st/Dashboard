/**
 *
 * @authors Shengtuo Hu (h1994st@gmail.com)
 * @date    2018-07-14 00:09:41
 * @version 1.0
 */

const conf = require('./conf.js');
const api = require('etherscan-api').init(conf.apiKey, 'ropsten');

// 3626757  ~ 3637776 ~ present
let startBlockNumber = 3626757; // 3626760, 3626766, 3626769
let stopBlockNumber = 3637776;

let targetPattern = '6080604052600436106100cc5763ffffffff60e060020a6000350416632810e1d681146100ce5780634e7407ea146100e357806355aa91fc146100f85780635df813301461012c5780638d17afee1461015857806394d9c9c71461016d5780639f21c1f21461018e578063a23e3474146101a3578063a97b3497146101ca578063b81f39a8146101df578063d0b06f5d146101e7578063d6b142b2146101fc578063d8e7d36a14610211578063e07fa3c114610229578063e2179b8e1461023e578063f494b58514610253575b005b3480156100da57600080fd5b506100cc610277565b3480156100ef57600080fd5b506100cc610311565b34801561010457600080fd5b5061011060043561034c565b60408051600160a060020a039092168252519081900360200190f35b34801561013857600080fd5b50610144600435610374565b604080519115158252519081900360200190f35b34801561016457600080fd5b506101106103a6565b34801561017957600080fd5b506100cc600160a060020a03600435166103b5565b34801561019a57600080fd5b50610110610479565b3480156101af57600080fd5b506101b8610488565b60408051918252519081900360200190f35b3480156101d657600080fd5b5061011061048e565b6101b861049d565b3480156101f357600080fd5b506101b8610553565b34801561020857600080fd5b506101b8610559565b34801561021d57600080fd5b5061011060043561055f565b34801561023557600080fd5b5061014461056d565b34801561024a57600080fd5b50610110610711565b34801561025f57600080fd5b506100cc600435600160a060020a0360243516610720565b600a54600160a060020a0316331461028e57600080fd5b600b60009054906101000a9004600160a060020a0316600160a060020a031660405180807f7265736f6c7665282900000000000000000000000000000000000000000000008152506009019050604051809103902060e060020a90046040518163ffffffff1660e060020a028152600401600060405180830381865af450505050565b600a54600160a060020a03161561032757600080fd5b42600655600a805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600880548290811061035a57fe5b600091825260209091200154600160a060020a0316905081565b600780548290811061038257fe5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600454600160a060020a031681565b6000805b6008548110156104045782600160a060020a03166008828154811015156103dc57fe5b600091825260209091200154600160a060020a031614156103fc57600191505b6001016103b9565b8115156104745760038054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff199182168117909255600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805490911690911790555b505050565b600354600160a060020a031681565b60015481565b600554600160a060020a031681565b42600655600954604080517f66077c010000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a0316916366077c0191602480830192602092919082900301818787803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b505050506040513d602081101561053057600080fd5b5051151561053d57600080fd5b662386f26fc10000341161054d57fe5b50303190565b60065481565b60005481565b600280548290811061035a57fe5b60045460009081908190600160a060020a031633141561058c57600191505b5060005b6002548110156105d75760028054339190839081106105ab57fe5b600091825260209091200154600160a060020a031614156105cf57600191506105d7565b600101610590565b8115156105e357600080fd5b60005442116105f157600080fd5b600360009054906101000a9004600160a060020a0316600160a060020a031660405180807f6f627365727665282900000000000000000000000000000000000000000000008152506009019050604051809103902060e060020a90046040518163ffffffff1660e060020a0281526004016000604051808303816000875af192505050151561067c57fe5b600b60009054906101000a9004600160a060020a0316600160a060020a031660405180807f6261736963576974686472617728290000000000000000000000000000000000815250600f019050604051809103902060e060020a90046040518163ffffffff1660e060020a028152600401600060405180830381865af450506001805460008054909101905594505050505090565b600954600160a060020a031681565b6004546000908190600160a060020a031633141561073d57600191505b5060005b60025481101561078857600280543391908390811061075c57fe5b600091825260209091200154600160a060020a031614156107805760019150610788565b600101610741565b81151561079457600080fd5b60025484106107a257600080fd5b60028054859081106107b057fe5b600091825260209091200154600160a060020a031633146107d057600080fd5b600554600160a060020a03848116911614610816576107ed61089a565b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b600160078581548110151561082757fe5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506108586108f1565b15610894576005546004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905561089461089a565b50505050565b60005b6007548110156108ee5760006007828154811015156108b857fe5b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550808060010191505061089d565b50565b6000805b60075481101561094457600780548290811061090d57fe5b90600052602060002090602091828204019190069054906101000a900460ff16151561093c5760009150610949565b6001016108f5565b600191505b50905600a165627a7a72305820';

function analyzeTx(tx) {
    if (tx.creates === undefined) return;

    if (tx.input == '0x') return;

    if (tx.input.indexOf(targetPattern) > -1) {
        console.log(`\tTxHash: ${tx.hash}, Creats: ${tx.creates}`)
    }
}

async function scan(txCallback) {
    for (let i = startBlockNumber; i <= stopBlockNumber; ++i) {
        let blockData = await api.proxy.eth_getBlockByNumber('0x' + i.toString(16));
        console.log('Block: ' + parseInt(blockData.result.number) + ' (' + i + ')');
        let txs = blockData.result.transactions;
        for (let j = 0; j < txs.length; ++j) {
            txCallback(txs[j]);
        }
    }
}

scan(analyzeTx);
